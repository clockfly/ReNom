# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, grid
# This file is distributed under the same license as the ReNom package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ReNom 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-08-06 17:31+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../rsts/renom.utility.distributor.rst:2
msgid "renom.utility.distributor"
msgstr ""

#: ../../rsts/renom.utility.distributor.rst:6
msgid "renom.utility.distributor.distributor"
msgstr ""

#: of renom.utility.distributor.distributor.Distributor:1
msgid "Distributor class This is the base class of a data distributor."
msgstr ""

#: of renom.utility.distributor.distributor.Distributor:4
msgid "Input data."
msgstr ""

#: of renom.utility.distributor.distributor.Distributor:6
msgid "Target data."
msgstr ""

#: of renom.utility.distributor.distributor.Distributor:8
msgid "Path to data."
msgstr ""

#: of renom.utility.distributor.distributor.Distributor.batch:1
msgid "This function returns `minibatch`."
msgstr ""

#: of renom.utility.distributor.distributor.Distributor.batch:3
msgid "Size of batch."
msgstr ""

#: of renom.utility.distributor.distributor.Distributor.batch:5
msgid "If True is passed, data will be selected randomly."
msgstr ""

#: of renom.utility.distributor.distributor.Distributor.split:1
msgid "データを分割し、新たなDistributorインスタンスを作成する。"
msgstr ""

#: of renom.utility.distributor.distributor.Distributor.split:3
msgid "分割比"
msgstr ""

#: of renom.utility.distributor.distributor.Distributor.split:5
msgid "真のとき、分割時に並び順をシャッフルする。"
msgstr ""

#: of renom.utility.distributor.distributor.NdarrayDistributor:1
msgid "NumpyArrayを扱うDistributorクラス"
msgstr ""

#: of renom.utility.distributor.distributor.NdarrayDistributor:3
#: renom.utility.distributor.distributor.TimeSeriesDistributor:9
msgid "入力データ"
msgstr ""

#: of renom.utility.distributor.distributor.NdarrayDistributor:4
#: renom.utility.distributor.distributor.TimeSeriesDistributor:10
msgid "教師データ"
msgstr ""

#: of renom.utility.distributor.distributor.TimeSeriesDistributor:1
msgid "時系列データを扱うDistributorクラス。 時系列データは以下のフォーマットで与えられる必要がある。"
msgstr ""

#: of renom.utility.distributor.distributor.TimeSeriesDistributor:4
msgid "N: データ数 T: 時系列長 D: データ次元 (N, T, D)"
msgstr ""

#: ../../rsts/renom.utility.distributor.rst:12
msgid "renom.utility.distributor.imageloader"
msgstr ""

#: of renom.utility.distributor.imageloader.ImageLoader:1
msgid ""
"ImageLoader is a generator that yields images in batches. By inputting "
"list of image path, ImageLoader load images and yields according to "
"number of batch size."
msgstr ""

#: of renom.utility.distributor.imageloader.ImageLoader:4
msgid "List of image list of a batch"
msgstr ""

#: of renom.utility.distributor.imageloader.ImageLoader:5
msgid "Color Space of Input Image"
msgstr ""

#: of renom.utility.distributor.imageloader.ImageLoader.wait_images:1
msgid "yeild images from batches which is list of image."
msgstr ""

#: ../../rsts/renom.utility.distributor.rst:18
msgid "renom.utility.distributor.threadingdistributor"
msgstr ""

#: of renom.utility.distributor.threadingdistributor.ImageDistributor:1
msgid ""
"Base class for image distribution. Use subclasses "
"ImageClassificationDistributor, ImageDetectionDistributor, "
"ImageSegmentationDistributor depending on the image task. Or sublass it "
"for original image tasks."
msgstr ""

#: of
#: renom.utility.distributor.threadingdistributor.ImageClassificationDistributor:3
#: renom.utility.distributor.threadingdistributor.ImageDetectionDistributor:5
#: renom.utility.distributor.threadingdistributor.ImageDistributor:6
msgid "list of image path"
msgstr ""

#: of renom.utility.distributor.threadingdistributor.ImageDistributor:7
msgid "list of labels (bbox and class) for every image (2 dimensional array)"
msgstr ""

#: of
#: renom.utility.distributor.threadingdistributor.ImageClassificationDistributor:5
#: renom.utility.distributor.threadingdistributor.ImageDetectionDistributor:7
#: renom.utility.distributor.threadingdistributor.ImageDistributor:8
msgid "list of classes name for this dataset"
msgstr ""

#: of
#: renom.utility.distributor.threadingdistributor.ImageClassificationDistributor:6
#: renom.utility.distributor.threadingdistributor.ImageDetectionDistributor:8
#: renom.utility.distributor.threadingdistributor.ImageDistributor:9
msgid "If True, apply datasets shuffle per epoch"
msgstr ""

#: of
#: renom.utility.distributor.threadingdistributor.ImageClassificationDistributor:7
#: renom.utility.distributor.threadingdistributor.ImageDetectionDistributor:9
#: renom.utility.distributor.threadingdistributor.ImageDistributor:10
msgid "resize input image for converting batch ndarray"
msgstr ""

#: of
#: renom.utility.distributor.threadingdistributor.ImageClassificationDistributor:8
#: renom.utility.distributor.threadingdistributor.ImageDetectionDistributor:10
#: renom.utility.distributor.threadingdistributor.ImageDistributor:11
msgid "color of Input Image. [\"RGB\", \"GRAY\"]"
msgstr ""

#: of
#: renom.utility.distributor.threadingdistributor.ImageClassificationDistributor:9
#: renom.utility.distributor.threadingdistributor.ImageDetectionDistributor:11
#: renom.utility.distributor.threadingdistributor.ImageDistributor:12
msgid "augmentater for Input Image"
msgstr ""

#: of
#: renom.utility.distributor.threadingdistributor.ImageDetectionDistributor:1
msgid ""
"Distributor class for tasks of image detection. Labels are expected to be"
" Bounding boxes and Classes. ex:) np.array([[center x, center y, "
"x_top_left, height, 0, 0, 0, 1, 0]])"
msgstr ""

#: of
#: renom.utility.distributor.threadingdistributor.ImageClassificationDistributor:4
#: renom.utility.distributor.threadingdistributor.ImageDetectionDistributor:6
msgid "list of labels (bbox and class) for every image"
msgstr ""

#: of
#: renom.utility.distributor.threadingdistributor.ImageDetectionDistributor.batch:1
msgid "generator of batch images."
msgstr ""

#: of
#: renom.utility.distributor.threadingdistributor.ImageClassificationDistributor.batch:1
#: renom.utility.distributor.threadingdistributor.ImageDetectionDistributor.batch:3
msgid "size of a batch."
msgstr ""

#: of
#: renom.utility.distributor.threadingdistributor.ImageDetectionDistributor.batch:4
msgid ""
"Images(4 dimension) of input data for Network. If including labels, "
"return with transformed labels"
msgstr ""

#: of
#: renom.utility.distributor.threadingdistributor.ImageClassificationDistributor:1
msgid "Distributor class for tasks of image classification."
msgstr ""

#: of
#: renom.utility.distributor.threadingdistributor.ImageClassificationDistributor.batch:2
msgid ""
"Images(4 dimension) of input data for Network. If including labels, "
"return with original labels"
msgstr ""

#: ../../rsts/renom.utility.distributor.rst:24
msgid "renom.utility.distributor.utilities"
msgstr ""

#: of renom.utility.distributor.utilities.get_appropriate_directory:1
msgid "Use to check 'directory' is a directory and ends with '/'"
msgstr ""

#: of renom.utility.distributor.utilities.get_appropriate_directory:3
msgid "a directory path"
msgstr ""

#: of renom.utility.distributor.utilities.get_appropriate_directory:5
msgid "a directory path which ends with '/'"
msgstr ""

#: of renom.utility.distributor.utilities.convert_class_to_onehot:1
msgid "Use to create a one-hot vectors list from class_list"
msgstr ""

#: of renom.utility.distributor.utilities.convert_class_to_onehot:3
#: renom.utility.distributor.utilities.generate_colors_from_name_list:3
msgid "sorted list of all the class names"
msgstr ""

#: of renom.utility.distributor.utilities.convert_class_to_onehot:5
msgid ""
"list of one-hot vectors the index of which corresponds to the index of "
"class_list"
msgstr ""

#: of renom.utility.distributor.utilities.is_image:1
msgid "Use to check if the extention of 'filepath' is that of image files"
msgstr ""

#: of renom.utility.distributor.utilities.is_image:3
msgid "a path which tells a certain image file"
msgstr ""

#: of renom.utility.distributor.utilities.get_class_from_onehot:1
msgid "Use to get the corresponding name from a one-hot vector"
msgstr ""

#: of renom.utility.distributor.utilities.get_class_from_onehot:3
msgid "one-hot vector"
msgstr ""

#: of renom.utility.distributor.utilities.get_class_from_onehot:4
msgid "a sorted list of all the class names"
msgstr ""

#: of renom.utility.distributor.utilities.get_class_from_onehot:7
msgid "name of the class"
msgstr ""

#: of renom.utility.distributor.utilities.convert_minmax_to_wh:1
msgid ""
"Use to transform [x_min, y_min, x_max, y_max] to [X(x_center), "
"Y(y_center), W(width), H(height)]."
msgstr ""

#: of renom.utility.distributor.utilities.convert_minmax_to_wh:3
msgid "bounding box which is expressed as [x_min, y_min, x_max, y_max]"
msgstr ""

#: of renom.utility.distributor.utilities.convert_wh_to_minmax:1
msgid ""
"Use to transform [X(x_center), Y(y_center), W(width), H(height)] to "
"[x_min, y_min, x_max, y_max]."
msgstr ""

#: of renom.utility.distributor.utilities.convert_wh_to_minmax:3
msgid ""
"bounding box which is expressed as [X(x_center), Y(y_center), W(width), "
"H(height)]"
msgstr ""

#: of renom.utility.distributor.utilities.convert_coco_to_minmax:1
msgid "Use to transform [xmin, ymin, W, H] to [xmin, ymin, xmax, ymax]"
msgstr ""

#: of renom.utility.distributor.utilities.convert_coco_to_minmax:3
msgid "bounding box which is expressed as [x_min, y_min, W(width), H(height)]"
msgstr ""

#: of renom.utility.distributor.utilities.get_num_images:1
msgid "Use to get number of Y_list."
msgstr ""

#: of renom.utility.distributor.utilities.convert_name_to_onehot:5
#: renom.utility.distributor.utilities.get_max_num_objects:3
#: renom.utility.distributor.utilities.get_num_images:3
#: renom.utility.distributor.utilities.make_ndarray:3
msgid "result from load_for_detection.load_for_detection"
msgstr ""

#: of renom.utility.distributor.utilities.get_num_images:5
msgid "the number of the images in Y_list"
msgstr ""

#: of renom.utility.distributor.utilities.get_max_num_objects:1
msgid "Use to get the maximum number of the objects in a image."
msgstr ""

#: of renom.utility.distributor.utilities.get_max_num_objects:5
msgid "number of the maximum number of the objects in one image"
msgstr ""

#: of renom.utility.distributor.utilities.get_class_list:1
msgid ""
"Use to get a list of the names sorted by alphabet that appear in Y_list. "
"This is a legacy code."
msgstr ""

#: of renom.utility.distributor.utilities.get_class_list:4
msgid "result from load_for detection.load_for_detection"
msgstr ""

#: of renom.utility.distributor.utilities.get_class_list:6
msgid "sorted list of the class names that appear in Y_list"
msgstr ""

#: of renom.utility.distributor.utilities.convert_name_to_onehot:1
msgid ""
"Use to convert all the name in Y_list (result from load_for_detection) to"
" one hot data. names are sorted by alphabet. This is a legacy code."
msgstr ""

#: of renom.utility.distributor.utilities.convert_name_to_onehot:7
msgid "the keys are names and the values are the corresponding one-hot vectors"
msgstr ""

#: of renom.utility.distributor.utilities.make_ndarray:1
msgid "Use to make ndarray from the result of load_for_detection"
msgstr ""

#: of renom.utility.distributor.utilities.make_ndarray:4
msgid "length of the class_list"
msgstr ""

#: of renom.utility.distributor.utilities.make_ndarray
msgid "element1: ndarray([[X Y W H 0 0 0 1 0 X Y W H 0 0 0 0 1 ...], ...]])"
msgstr ""

#: of renom.utility.distributor.utilities.make_ndarray
msgid "element2: int"
msgstr ""

#: of renom.utility.distributor.utilities.generate_colors_from_name_list:1
msgid ""
"Use to generate a dictionary whose key and value are a name and color "
"value"
msgstr ""

#: of renom.utility.distributor.utilities.generate_colors_from_name_list:5
msgid "{name1: rgb1, name2: rgb2, ...}"
msgstr ""

#: of renom.utility.distributor.utilities.imshow_with_bndboxes:1
msgid ""
"Use to show an image with the corresponding bounding boxes and object "
"names"
msgstr ""

#: of renom.utility.distributor.utilities.imshow_with_bndboxes:3
msgid "numpy array of an image"
msgstr ""

#: of renom.utility.distributor.utilities.imshow_with_bndboxes:4
msgid "list of the class names"
msgstr ""

#: of renom.utility.distributor.utilities.imshow_with_bndboxes:5
msgid "list of the bounding boxes (= [ [xmin, ymin, xmax, ymax], ... ]"
msgstr ""

#: of renom.utility.distributor.utilities.imshow_with_bndboxes:6
msgid "filepath to which the created image is to be saved"
msgstr ""

#: of renom.utility.distributor.utilities.imshow_batch:1
msgid "Use to show multiple images"
msgstr ""

#: of renom.utility.distributor.utilities.imshow_batch:3
msgid ""
"list (list(image1, image2, ...)) or np.ndarray "
"(np.ndarray[numofimage][height][width][colors])"
msgstr ""

#: of renom.utility.distributor.utilities.imshow_batch:4
msgid ""
"2-dimentional list which represents [the number of vertical images, the "
"number of horizontal images]"
msgstr ""

#: of renom.utility.distributor.utilities.read_bndbox_from_ndarray:1
msgid "Use to read bounding boxes from a given ndarray."
msgstr ""

#: of renom.utility.distributor.utilities.read_bndbox_from_ndarray:3
msgid "result from make_ndarray"
msgstr ""

#: of renom.utility.distributor.utilities.read_bndbox_from_ndarray:4
msgid "the number of all the classes"
msgstr ""

#: of renom.utility.distributor.utilities.read_bndbox_from_ndarray
msgid "element1: bounding boxes ( = [boxes_im1, boxes_im2, ...] )"
msgstr ""

#: of renom.utility.distributor.utilities.read_bndbox_from_ndarray
msgid "element2: onehot_vectors ( = [onehot_im1, onehot_im2, ...])"
msgstr ""

#: of renom.utility.distributor.utilities.build_yolo_labels:1
msgid ""
"Use to transform a list of objects per image into a "
"image*cells*cells*(5+classes) matrix. Each cell in image can only be "
"labeled for 1 object."
msgstr ""

#: of renom.utility.distributor.utilities.build_yolo_labels:4
msgid "\"5\" represents: objectness (0 or 1) and X Y W H"
msgstr ""

#: of renom.utility.distributor.utilities.build_yolo_labels:6
msgid "np.ndarray ([batch][width][height])"
msgstr ""

#: of renom.utility.distributor.utilities.build_yolo_labels:7
msgid "length of rows of y"
msgstr ""

#: of renom.utility.distributor.utilities.build_yolo_labels:8
msgid "length of columns of y"
msgstr ""

#: of renom.utility.distributor.utilities.build_yolo_labels:9
msgid "grid size"
msgstr ""

#: of renom.utility.distributor.utilities.build_yolo_labels:10
msgid "length of class_list"
msgstr ""

#: of renom.utility.distributor.utilities.build_yolo_labels:16
msgid "[batch][cells][cells][1 + 4 + classes]"
msgstr ""


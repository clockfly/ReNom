# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, grid
# This file is distributed under the same license as the ReNom package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ReNom 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-08-07 15:18+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../rsts/tutorial2-cifar10.ipynb:6
msgid "Tutorial 2 Cifar10 Image classifier"
msgstr "チュートリアル 2 Cifar10 Image クラスタリング"

#: ../../rsts/tutorial2-cifar10.ipynb:8
msgid ""
"In this tutorial, we'll apply a convolutional neural network (CNN) to "
"another standardized dataset, the \"CIFAR\" data. This dataset is a "
"collection of 60,000 images over 10 classes."
msgstr "このチュートリアルでは、畳み込みニューラルネットワークを用いて、Cifar10画像データセットのクラスタリングを行います.Cifar10データセットは10クラス、60,000枚の自然画像からなるデータセットです."

#: ../../rsts/tutorial2-cifar10.ipynb:18
msgid "Required libraries"
msgstr "必要なライブラリ"

#: ../../rsts/tutorial2-cifar10.ipynb:47
msgid "GPU-enabled Computing"
msgstr "GPUを用いた計算"

#: ../../rsts/tutorial2-cifar10.ipynb:49
msgid ""
"If you wish to use a GPU, you'll need to call the ``set_cuda_active()`` "
"with the single argument ``True``. This will generally allow training to "
"run much faster than relying on the CPU. You'll need an NVIDIA GPU "
"installed on your machine."
msgstr ""
"GPUを用いて計算を行う場合、 ``set_cuda_active()`` "
"を用いて、cudaを有効化します.GPUを使用するためには、GPUデバイスが適切に設定されている必要があります.特に環境変数'CUDA_HOME'が設定されていることを確認してください."

#: ../../rsts/tutorial2-cifar10.ipynb:68
msgid "Load data"
msgstr "データの準備"

#: ../../rsts/tutorial2-cifar10.ipynb:70
msgid ""
"Here we just unpickle the CIFAR image data, collected from the CIFAR "
"website (https://www.cs.toronto.edu/~kriz/cifar.html). As in Tutorial 1, "
"we scale the data to a range of 0 to 1 and binarize the labels."
msgstr "CIFARのWEBサイトからデータセットをダウンロード出来ます.データセットはpickleモジュールを用いて以下の様に展開することが出来ます.Tutorial1と同じように、前処理として、画像のリスケーリングと教師データの二値化を行います.また、畳込みニューラルネットワークではデータを4次元テンソルとして扱います.テンソルデータの構造はNCHW形式となっております.ここでN:バッチサイズ、C:チャネル数、H:画像の縦幅、W:画像の横幅です."

#: ../../rsts/tutorial2-cifar10.ipynb:127
msgid "Neural network definition"
msgstr "ニューラルネットワークの定義"

#: ../../rsts/tutorial2-cifar10.ipynb:129
msgid ""
"Setup the CNN- essentially similar to Tutorial 1, except that here we are"
" using several hidden layers. Also, we try to avoid over-fitting, by "
"using the''dropout'' technique."
msgstr "畳み込みニューラルネットワークをTutorial1と同様に定義します.Tutorial1よりも使用するレイヤ数が多いので、下の例のようにSequentialモデルを用いて定義するのが簡単かもしれません."

#: ../../rsts/tutorial2-cifar10.ipynb:168
msgid "Definition of a nural network with sequential model"
msgstr "Sequentialモデルを用いたニューラルネットワークの定義"

#: ../../rsts/tutorial2-cifar10.ipynb:202
msgid "Instantiation"
msgstr "インスタンス化"

#: ../../rsts/tutorial2-cifar10.ipynb:221
msgid "Training loop"
msgstr "学習ループ"

#: ../../rsts/tutorial2-cifar10.ipynb:223
msgid ""
"In the training loop, we recommend running a validation step for each "
"minibatch. This will allow us to check the learning process, and prevent "
"overfitting. This also allows you to diagnose training problems by "
"comparing the validation and training learning curves."
msgstr "学習ループの中では、モデルのバリデーションを行うことを推奨します."
"モデルの学習過程を確認でき、過学習を早期に発見できる可能性があります."

#: ../../rsts/tutorial2-cifar10.ipynb:383
msgid "Model evaluation"
msgstr "モデルの評価"

#: ../../rsts/tutorial2-cifar10.ipynb:385
msgid ""
"Finally, we evaluate the models labeling performance using the same "
"metrics as in Tutorial 1."
msgstr "最後にTutorial1と同様にテストデータに対する予測性能を"
"混同行列とF1スコアを用いて評価します."
"学習の結果、78%の精度でクラスタリングを行えるモデルを構築することが出来ました."



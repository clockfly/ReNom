# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, grid
# This file is distributed under the same license as the ReNom package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ReNom 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-13 13:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rsts/introduction/main.rst:2
msgid "Introduction of version 2"
msgstr ""

#: ../../rsts/introduction/main.rst:4
msgid ""
"In ReNom version 2, automatic differentiation feature have been added to "
"version 1.0. Users are able to build neural network model with a lot of "
"flexibility."
msgstr ""

#: ../../rsts/introduction/main.rst:7
msgid "**Concept of version 2**"
msgstr ""

#: ../../rsts/introduction/main.rst:9
msgid ""
"ReNom 2 is focusing on its usability first, as the same as previous "
"version."
msgstr ""

#: ../../rsts/introduction/main.rst:11
msgid ""
"The syntax of ReNom version 2 is aligned to NumPy, so that users can "
"compute differential value adding a tiny script change to the formula "
"written in NumPy style."
msgstr ""

#: ../../rsts/introduction/main.rst:14
msgid ""
"By reducing user interfaces, ReNom became a NumPy user friendly library "
"package while enables users to build a neural network model more "
"flexibly."
msgstr ""

#: ../../rsts/introduction/main.rst:17
msgid "Following is a comparison of NumPy and ReNom coding style."
msgstr ""

#: ../../rsts/introduction/main.rst:27
msgid "● Numpy"
msgstr ""

#: ../../rsts/introduction/main.rst:42
msgid "● ReNom"
msgstr ""

#: ../../rsts/introduction/main.rst:44
msgid ""
"Like this, ReNom users can compute gradient by changing only a few NumPy "
"code."
msgstr ""

#: ../../rsts/introduction/main.rst:46
msgid "**Auto Differentiation**"
msgstr ""

#: ../../rsts/introduction/main.rst:48
msgid ""
"In ReNom, users can create calculation graph with a simple step. First, "
"defining differentiation target variable as Variable, then scripting "
"formula as the same syntax as NumPy."
msgstr ""

#: ../../rsts/introduction/main.rst:62
msgid ""
"Variable class is inherited ndarray class of NumPy[ref], users can "
"create/build/establish calculation graph similar way to NumPy."
msgstr ""

#: ../../rsts/introduction/main.rst:65
msgid "**Sequential Model**"
msgstr ""

#: ../../rsts/introduction/main.rst:67
msgid ""
"As the same as previous ReNom versions, users can define the model, "
"simply piling the layers up."
msgstr ""

#: ../../rsts/introduction/main.rst:79
msgid ""
"In ReNom, defined class names are capitalized. As mentioned, Sequential "
"model can be instantiated by providing a layer object list."
msgstr ""

#: ../../rsts/introduction/main.rst:83
msgid "**Functional Model**"
msgstr ""

#: ../../rsts/introduction/main.rst:85
msgid ""
"In ReNom 2, some layers previously regarded as objects such as Activation"
" function layer, fully connected layer are able to be handled "
"functionally."
msgstr ""

#: ../../rsts/introduction/main.rst:105
msgid ""
"In ReNom, defined function names are small lettered. As above, defined "
"functions are able to handle layer objects."
msgstr ""

#: ../../rsts/introduction/main.rst:109
msgid "**Computation with GPU**"
msgstr ""

#: ../../rsts/introduction/main.rst:111
msgid ""
"In order to use GPU, users need to install Cuda-Toolkit and cuDNN. To "
"switch GPU on/off, simply call following function."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, grid
# This file is distributed under the same license as the ReNom package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ReNom 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-21 10:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rsts/api/graph/autosum/renom.graph.function.ConvolutionalGraphElement.rst:2
msgid "renom.graph.function.ConvolutionalGraphElement"
msgstr ""

#: of renom.graph.function.ConvolutionalGraphElement:1
msgid "Convolutional Layer."
msgstr ""

#: of renom.graph.function.ConvolutionalGraphElement:3
msgid ""
"This class creates a convolution filter to be convolved with the input "
"tensor. This class accepts up to 3d image input. Note that the 2d "
"implementation differs slightly from the 3d implementation, giving no "
"guarantee that they will perform equally."
msgstr ""

#: of renom.graph.function.ConvolutionalGraphElement
msgid "Parameters"
msgstr ""

#: of renom.graph.function.ConvolutionalGraphElement:8
msgid "The dimensionality of the output."
msgstr ""

#: of renom.graph.function.ConvolutionalGraphElement:10
msgid "Filter size of the convolution kernel."
msgstr ""

#: of renom.graph.function.ConvolutionalGraphElement:12
msgid "Size of the zero-padding around the image."
msgstr ""

#: of renom.graph.function.ConvolutionalGraphElement:14
msgid "Stride-size of the convolution."
msgstr ""

#: of renom.graph.function.ConvolutionalGraphElement:16
msgid "Initializer object for weight initialization."
msgstr ""

#: of renom.graph.function.ConvolutionalGraphElement:20
msgid "Example"
msgstr ""

#: of renom.graph.function.ConvolutionalGraphElement:21
msgid ""
"In [1]: import numpy as np In [2]: import renom as rm In [3]: n, c, h, w "
"= (10, 3, 32, 32) In [4]: x = np.random.rand(n, c, h, w) In [5]: x.shape "
"Out[5]: (10, 3, 32, 32) In [6]: layer = "
"rm.graph.ConvolutionalGraphElement(channels = 5) In [7]: z = "
"layer(x).as_ndarray() In [8]: z.shape Out[8]: (10, 5, 30, 30)"
msgstr ""

#: of renom.graph.function.ConvolutionalGraphElement:32
msgid "Tensor data format is **NCHW**."
msgstr ""

#: of renom.graph.function.ConvolutionalGraphElement.__init__:1
msgid "Initialize self.  See help(type(self)) for accurate signature."
msgstr ""

#: ../../rsts/api/graph/autosum/renom.graph.function.ConvolutionalGraphElement.rst:13
msgid "Methods"
msgstr ""

#: ../../rsts/api/graph/autosum/renom.graph.function.ConvolutionalGraphElement.rst:19:<autosummary>:1
msgid ""
":obj:`__init__ "
"<renom.graph.function.ConvolutionalGraphElement.__init__>`\\ "
"\\(\\[channels\\, kernel\\, padding\\, ...\\]\\)"
msgstr ""

#: ../../rsts/api/graph/autosum/renom.graph.function.ConvolutionalGraphElement.rst:19:<autosummary>:1
msgid "Initialize self."
msgstr ""

#: ../../rsts/api/graph/autosum/renom.graph.function.ConvolutionalGraphElement.rst:19:<autosummary>:1
msgid ""
":obj:`connect <renom.graph.function.ConvolutionalGraphElement.connect>`\\"
" \\(other\\)"
msgstr ""

#: ../../rsts/api/graph/autosum/renom.graph.function.ConvolutionalGraphElement.rst:19:<autosummary>:1
msgid ""
":obj:`load <renom.graph.function.ConvolutionalGraphElement.load>`\\ "
"\\(filename\\[\\, devices\\]\\)"
msgstr ""

#: ../../rsts/api/graph/autosum/renom.graph.function.ConvolutionalGraphElement.rst:19:<autosummary>:1
msgid "Load saved weights to model."
msgstr ""

#: ../../rsts/api/graph/autosum/renom.graph.function.ConvolutionalGraphElement.rst:19:<autosummary>:1
msgid ""
":obj:`save <renom.graph.function.ConvolutionalGraphElement.save>`\\ "
"\\(filename\\)"
msgstr ""

#: ../../rsts/api/graph/autosum/renom.graph.function.ConvolutionalGraphElement.rst:19:<autosummary>:1
msgid "Save model attributes."
msgstr ""

